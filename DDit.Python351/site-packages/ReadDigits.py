# -*- coding: UTF-8 -*-
# @create by marick, 2018-07-18
# 识别数字
# 导入必要的软件包
import cv2
import os
import numpy as np
import tensorflow as tf

class ReadDigits(object):
    def __init__(self, parent):
        self.parent=parent;
        self.MetalFilePath=parent['MetaFilePath']
        self.ModelFilePath=parent['ModelFilePath']
        print (self.ModelFilePath)
        print (self.MetalFilePath)
    def start(self):
        print ('start')
    #识别数字
    #传入参数
    #toCheck，要检测图像
    #返回值
    #返回值, 返回0-9之间任意数字
    #算法简介
    #
    def CheckDigit(self,toCheck):
        rtn = None
        image = cv2.resize(toCheck, (28, 28), 0, 0, cv2.INTER_CUBIC)
        image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        image = image.astype(np.float32)
        image = cv2.threshold(image, 130, 255, cv2.THRESH_BINARY_INV)[1]
        kernal = cv2.getStructuringElement(cv2.MORPH_RECT, (2, 2))
        image = cv2.dilate(image, kernal, iterations=1)
        x_batch = np.asmatrix(image.flatten())
        with tf.Session() as sess:
            saver = tf.train.import_meta_graph(self.MetalFilePath)
            saver.restore(sess, self.ModelFilePath)
            graph = tf.get_default_graph()
            x = graph.get_tensor_by_name("x:0")
            y_pred = graph.get_tensor_by_name("y_pred:0")
            result = sess.run(y_pred, feed_dict={x: x_batch})
            rtn = result.argmax()
        return rtn

    def stop(self):
        print ('stop')
    def quit(self):
        print ('quit')

